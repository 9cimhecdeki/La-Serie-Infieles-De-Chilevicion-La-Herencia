extends ../../_layout/default.pug

block view
  .card
    .card-body
      h1 Usage
      h2#tooling-setup
        | Tooling setup
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#tooling-setup' style='padding-left: 0.375em;')
      p
        | CoreUI Admin Template uses 
        a(href='https://docs.npmjs.com/misc/scripts/') npm scripts
        |  for its build system. Our 
        a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template/blob/v4.0.0-beta.0/package.json') package.json
        |  includes convenient methods for working with the framework, including compiling code, running tests, and more.
      p
        | To use our build system and run template locally, you’ll need a copy of CoreUI’s source files and Node. Follow these steps and you should be ready to rock:
      ol
        li
          a(href='https://nodejs.org/en/download/') Download and install Node.js
          | , which we use to manage our dependencies.
        li
          | Either 
          a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template/archive/v4.0.0-beta.0.zip') download CoreUI’s sources
          |  or fork 
          a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template') CoreUI’s repository
          | .
        li
          | Navigate to the root 
          code /coreui-free-bootstrap-admin-template
          |  directory and run 
          code npm install
          |  to install our local dependencies listed in 
          a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template/blob/v4.0.0-beta.0/package.json') package.json
          | .
      p
        | When completed, you’ll be able to run the various commands provided from the command line.
      h2#using-npm-scripts
        | Using npm scripts
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#using-npm-scripts' style='padding-left: 0.375em;')
      p
        | Our 
        a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template/blob/v4.0.0-beta.0/package.json') package.json
        |  includes numerous tasks for developing the project. Run 
        code npm run
        |  to see all the npm scripts in your terminal. 
        strong Primary tasks include:
      table.table
        thead
          tr
            th Task
            th Description
        tbody
          tr
            td
              code npm start
            td
              | Compiles CSS and JavaScript, builds the documentation, and starts a local server.
          tr
            td
              code npm run dist
            td
              | Creates the 
              code dist/
              |  directory with compiled files. Requires 
              a(href='https://sass-lang.com/') Sass
              | , 
              a(href='https://github.com/postcss/autoprefixer') Autoprefixer
              | , and 
              a(href='https://github.com/terser/terser') terser
              | .
          tr
            td
              code npm test
            td
              | Runs tests locally after running 
              code npm run dist
          tr
            td
              code npm run docs-serve
            td
              | Builds and runs the documentation locally.
      .docs-callout.docs-callout-info
        strong Get started with Bootstrap via npm with our starter project!
        |  Head to the 
        a(href='https://github.com/twbs/bootstrap-npm-starter') twbs/bootstrap-npm-starter
        |  template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
      h2#sass
        | Sass
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#sass' style='padding-left: 0.375em;')
      p
        | Bootstrap uses 
        a(href='https://sass-lang.com/dart-sass') Dart Sass
        |  for compiling our Sass source files into CSS files (included in our build process), and we recommend you do the same if you’re compiling Sass using your own asset pipeline. We previously used Node Sass for Bootstrap v4, but LibSass and packages built on top of it, including Node Sass, are now 
        a(href='https://sass-lang.com/blog/libsass-is-deprecated') deprecated
        | .
      p
        | Dart Sass uses a rounding precision of 10 and for efficiency reasons does not allow adjustment of this value. We don’t lower this precision during further processing of our generated CSS, such as during minification, but if you chose to do so we recommend maintaining a precision of at least 6 to prevent issues with browser rounding.
      h2#autoprefixer
        | Autoprefixer
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#autoprefixer' style='padding-left: 0.375em;')
      p
        | CoreUI for Bootstrap uses 
        a(href='https://github.com/postcss/autoprefixer') Autoprefixer
        |  (included in our build process) to automatically add vendor prefixes to some CSS properties at build time. Doing so saves us time and code by allowing us to write key parts of our CSS a single time while eliminating the need for vendor mixins like those found in v3.
      p
        | We maintain the list of browsers supported through Autoprefixer in a separate file within our GitHub repository. See 
        a(href='https://github.com/coreui/coreui-free-bootstrap-admin-template/blob/v4.0.0-beta.0/.browserslistrc') .browserslistrc
        |  for details.
      h2#rtlcss
        | RTLCSS
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#rtlcss' style='padding-left: 0.375em;')
      p
        | CoreUI for Bootstrap uses 
        a(href='https://rtlcss.com/') RTLCSS
        |  to process compiled CSS and convert them to RTL – basically replacing horizontal direction aware properties (eg. 
        code padding-left
        | ) with their opposite. It allows us only write our CSS a single time and make minor tweaks using RTLCSS 
        a(href='https://rtlcss.com/learn/usage-guide/control-directives/') control
        |  and 
        a(href='https://rtlcss.com/learn/usage-guide/value-directives/') value
        |  directives.
      h2#local-documentation
        | Local documentation
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#local-documentation' style='padding-left: 0.375em;')
      p
        | Running our documentation locally requires the use of Hugo, which gets installed via the 
        a(href='https://www.npmjs.com/package/hugo-bin') hugo-bin
        |  npm package. Hugo is a blazingly fast and quite extensible static site generator that provides us: basic includes, Markdown-based files, templates, and more. Here’s how to get it started:
      ol
        li
          | Run through the 
          a(href='#tooling-setup') tooling setup
          |  above to install all dependencies.
        li
          | From the root 
          code /coreui
          |  directory, run 
          code npm run docs-serve
          |  in the command line.
        li
          | Open 
          code http://localhost:9001/
          |  in your browser, and voilà.
      p
        | Learn more about using Hugo by reading its 
        a(href='https://gohugo.io/documentation/') documentation
        | .
      h2#troubleshooting
        | Troubleshooting
        a.anchorjs-link(aria-label='Anchor' data-anchorjs-icon='#' href='#troubleshooting' style='padding-left: 0.375em;')
      p
        | Should you encounter problems with installing dependencies, uninstall all previous dependency versions (global and local). Then, rerun 
        code npm install
        | .
